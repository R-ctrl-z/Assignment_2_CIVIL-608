% Database contraction scour analysis

% Authors: Romain Van Mol

%% Clear and Default ======================================================
clear variables;
close all;
clc;
set(0, 'DefaultLineLineWidth', 1.5);
set(groot,'defaultAxesTickLabelInterpreter','latex');
set(groot,'defaulttextinterpreter','latex');
set(groot,'defaultLegendInterpreter','latex');

%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: C:\Users\vanmol\Documents\Doctorate\07-Results\01-Matlab_script\02-Data\2025-03-10_Contraction_scour_studies.xlsm
%    Worksheet: Database
%
% Auto-generated by MATLAB on 01-Mar-2025 09:56:24

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 23);

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["AuthorsOfTheStudy", "Year", "ArticleID", "MedianDiameterD50mm", "GeometricStandardDeviationgd84d1605", "SpecificDensitySs", "UpstreamWidthB1m", "ContractedWidthB2m", "RatioB2b1", "UpstreamAverageFlowVelocityU1ms", "CriticalShearVelocityForSedimentEntrainmentUcms", "CriticalVelocityForSedimentUcms", "u1uc", "u1ucDeyAndRaikar2005", "UpstreamFlowDepthY1m", "FlowDepthAtContractedReachY2m", "EquilibriumScourDepthDsm", "TypeOfScour", "LengthOfTheContractionm", "ShapeOfContraction", "LengthDownstreamOfTheContractionm", "Source", "Comments"];
opts.VariableTypes = ["string", "double", "string", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "string", "double", "categorical", "double", "categorical", "categorical"];

% Specify variable properties
opts = setvaropts(opts, ["AuthorsOfTheStudy", "ArticleID", "TypeOfScour", "ShapeOfContraction", "Source", "Comments"], "EmptyFieldRule", "auto");

% Import the data
contraction_table = readtable("C:\Users\vanmol\Documents\Doctorate\02-EDCE\CIVIL-608 Research skills in the Open Science Era\Assignement\Assignment_2\Data\CIVIL_608_Data.csv", opts);

%% Clear temporary variables
clear opts

%% Physical parameters
g = 9.81;           % [m/s^2]   gravity
rho = 1000;         % [kg/m^3]  water density
theta_c = 0.047;    % [-]       critical Shield parameters

%% Median diameter distribution
% Clear-water
clear_water = matches(contraction_table.TypeOfScour,"clear-water");
clear_water_contraction_table = contraction_table(clear_water,:);

% Live-bed
live_bed = matches(contraction_table.TypeOfScour,"live-bed");
live_bed_contraction_table = contraction_table(live_bed,:);

%% Geometric standard deviation
% Clear-water
edges_sigma_g = [1 1.4 1.6 1.8 2 3.6];
edges_sigma_g(2:end-1) = edges_sigma_g(2:end-1) + eps(edges_sigma_g(2:end-1));  % increase right edges of each bin to the next representable number
sigma_g_clear_water = histcounts(clear_water_contraction_table.GeometricStandardDeviationgd84d1605, edges_sigma_g);

% Live-bed
sigma_g_live_bed = histcounts(live_bed_contraction_table.GeometricStandardDeviationgd84d1605, edges_sigma_g);

%% Contraction ratio
edges_contraction_ratio = [0 0.2 0.4 0.6 0.8 1];
edges_contraction_ratio(2:end-1) = edges_contraction_ratio(2:end-1) + eps(edges_contraction_ratio(2:end-1));  % increase right edges of each bin to the next representable number
contraction_ratio_clear_water = histcounts(clear_water_contraction_table.RatioB2b1, edges_contraction_ratio);

% Live-bed
contraction_ratio_live_bed = histcounts(live_bed_contraction_table.RatioB2b1, edges_contraction_ratio);

%% Froude number
% Clear-water
froude_upstream_clear_water = clear_water_contraction_table.UpstreamAverageFlowVelocityU1ms./(g*clear_water_contraction_table.UpstreamFlowDepthY1m).^(1/2);
clear_water_contraction_table.froude_upstream = froude_upstream_clear_water; % add the new vector to the table
edges_froude_upstream = [0 0.14 0.28 0.42 0.56 0.70 0.84 98];
edges_froude_upstream(2:end-1) = edges_froude_upstream(2:end-1) + eps(edges_froude_upstream(2:end-1));  % increase right edges of each bin to the next representable number
froude_upstream_clear_water_hist = histcounts(froude_upstream_clear_water, edges_froude_upstream);

% Live-bed
froude_upstream_live_bed = live_bed_contraction_table.UpstreamAverageFlowVelocityU1ms./(g*live_bed_contraction_table.UpstreamFlowDepthY1m).^(1/2);
live_bed_contraction_table.froude_upstream = froude_upstream_live_bed; % add the new vector to the table
froude_upstream_live_bed_hist = histcounts(froude_upstream_live_bed, edges_froude_upstream);


%% Shear stress ratio
% Live-bed
tau_live_bed = rho*g*live_bed_contraction_table.UpstreamAverageFlowVelocityU1ms.^2.*(live_bed_contraction_table.MedianDiameterD50mm/1000).^(1/3)./(21.1^2*live_bed_contraction_table.UpstreamFlowDepthY1m.^(1/3));
tau_c_live_bed = theta_c*rho*g*(live_bed_contraction_table.MedianDiameterD50mm/1000).*(live_bed_contraction_table.SpecificDensitySs-1);
ratio_tau_live_bed = tau_live_bed./tau_c_live_bed;
live_bed_contraction_table.ratio_tau = ratio_tau_live_bed; % add the new vector to the table
live_bed_contraction_table.tau = tau_live_bed; % add the new vector to the table
live_bed_contraction_table.tau_c = tau_c_live_bed; % add the new vector to the table

%% Identification of sub tables and scour depth equations for live-bed
authors_live_bed = {"Straub", "Ashida", "Komura", "Gill", "Rana", "Nowroozpour and Ettema"};
coeff_komura_live_bed = 1.45;

% Preallocate structures for measured and computed values
live_bed_measured_y2_y1 = struct();
live_bed_computed = struct();

for i = 1:length(authors_live_bed)
    study = authors_live_bed{i};
    study_key = strrep(study, ' ', '_'); % Replace spaces with underscores for struct field names

    % Filter the data table
    study_filter = matches(live_bed_contraction_table.AuthorsOfTheStudy, study);
    study_table = live_bed_contraction_table(study_filter, :);

    % Measured values
    live_bed_measured_y2_y1.(study_key) = study_table.FlowDepthAtContractedReachY2m./study_table.UpstreamFlowDepthY1m;
    live_bed_measured_y2.(study_key) = study_table.FlowDepthAtContractedReachY2m;

    % Computed values for Straub (1934)
    live_bed_computed.(study_key).Straub_1934 = (1./study_table.RatioB2b1).^(6/7).*(study_table.tau_c./(2*study_table.tau) + sqrt((study_table.tau_c./(2*study_table.tau)).^2 + (1 - study_table.tau_c./study_table.tau).*(1./study_table.RatioB2b1))).^(-3/7);
    live_bed_computed.(study_key).y2_Straub_1934 = live_bed_computed.(study_key).Straub_1934.*study_table.UpstreamFlowDepthY1m;

    % Computed values for Komura (1966)
    live_bed_computed.(study_key).Komura_1966 = coeff_komura_live_bed*study_table.froude_upstream.^(1/5).*(1./study_table.RatioB2b1).^(2/3).*study_table.GeometricStandardDeviationgd84d1605.^(-1/5);
    live_bed_computed.(study_key).y2_Komura_1966 = live_bed_computed.(study_key).Komura_1966.*study_table.UpstreamFlowDepthY1m;

    % Computed values for Gill (1981)
    live_bed_computed.(study_key).Gill_1981 = (1./study_table.RatioB2b1).^(6/7).*((1 ./ study_table.RatioB2b1).^(1/3).*(1 - (1./study_table.ratio_tau)) + (1./study_table.ratio_tau)).^(-3/7);
    live_bed_computed.(study_key).y2_Gill_1981 = live_bed_computed.(study_key).Gill_1981.*study_table.UpstreamFlowDepthY1m;

    % Computed values for Lim and Cheng (1998)
    live_bed_computed.(study_key).Lim_Cheng_1998 = (1./study_table.RatioB2b1).^(0.75);
    live_bed_computed.(study_key).y2_Lim_Cheng_1998 = live_bed_computed.(study_key).Lim_Cheng_1998.*study_table.UpstreamFlowDepthY1m;
end

%% Scour depth graphs live-bed ============================================
x_line = linspace(0,10,100);
y_line = x_line;

% Plot live-bed y2 --------------------------------------------------------
figure(7)
tiledlayout(3,2,"TileSpacing","tight");

% Straub (1934)
nexttile
plot(x_line,y_line, '-k', 'DisplayName', '$x=y$');
hold on
plot(live_bed_measured_y2.Straub, live_bed_computed.Straub.y2_Straub_1934, 'o', 'Color', "#0072BD", 'DisplayName', 'Straub (1934)');
plot(live_bed_measured_y2.Ashida, live_bed_computed.Ashida.y2_Straub_1934, '+', 'Color', "#D95319", 'DisplayName', 'Ashida (1963)');
plot(live_bed_measured_y2.Komura, live_bed_computed.Komura.y2_Straub_1934, 'square', 'Color', "#EDB120", 'DisplayName', 'Komura (1966)');
plot(live_bed_measured_y2.Gill, live_bed_computed.Gill.y2_Straub_1934, '^', 'Color', "#77AC30", 'DisplayName', 'Gill (1981)');
plot(live_bed_measured_y2.Rana, live_bed_computed.Rana.y2_Straub_1934, 'x', 'Color', "#7E2F8E", 'DisplayName', 'Rana (1986)');
plot(live_bed_measured_y2.Nowroozpour_and_Ettema, live_bed_computed.Nowroozpour_and_Ettema.y2_Straub_1934, 'diamond', 'Color', "#A2142F", 'DisplayName', 'Nowroozpour and Ettema (2021)');

% Title
title("Equation (7) Straub (1934)")

% Axis
xlabel('Measured $y_{2}$ [m]')
ylabel('Computed $y_{2}$ [m]')
xlim([0 0.5])
ylim([0 0.5])
axis square

% Grid
grid on

% Komura (1966)
nexttile
plot(x_line,y_line, '-k', 'DisplayName', '$x=y$');
hold on
plot(live_bed_measured_y2.Straub, live_bed_computed.Straub.y2_Komura_1966, 'o', 'Color', "#0072BD", 'DisplayName', 'Straub (1934)');
plot(live_bed_measured_y2.Ashida, live_bed_computed.Ashida.y2_Komura_1966, '+', 'Color', "#D95319", 'DisplayName', 'Ashida (1963)');
plot(live_bed_measured_y2.Komura, live_bed_computed.Komura.y2_Komura_1966, 'square', 'Color', "#EDB120", 'DisplayName', 'Komura (1966)');
plot(live_bed_measured_y2.Gill, live_bed_computed.Gill.y2_Komura_1966, '^', 'Color', "#77AC30", 'DisplayName', 'Gill (1981)');
plot(live_bed_measured_y2.Rana, live_bed_computed.Rana.y2_Komura_1966, 'x', 'Color', "#7E2F8E", 'DisplayName', 'Rana (1986)');
plot(live_bed_measured_y2.Nowroozpour_and_Ettema, live_bed_computed.Nowroozpour_and_Ettema.y2_Komura_1966, 'diamond', 'Color', "#A2142F", 'DisplayName', 'Nowroozpour and Ettema (2021)');

% Title
title("Equation (10) Komura (1966)")

% Axis
xlabel('Measured $y_{2}$ [m]')
ylabel('Computed $y_{2}$ [m]')
xlim([0 0.5])
ylim([0 0.5])
axis square

% Grid
grid on

% Gill (1981)
nexttile
plot(x_line,y_line, '-k', 'DisplayName', '$x=y$');
hold on
plot(live_bed_measured_y2.Straub, live_bed_computed.Straub.y2_Gill_1981, 'o', 'Color', "#0072BD", 'DisplayName', 'Straub (1934)');
plot(live_bed_measured_y2.Ashida, live_bed_computed.Ashida.y2_Gill_1981, '+', 'Color', "#D95319", 'DisplayName', 'Ashida (1963)');
plot(live_bed_measured_y2.Komura, live_bed_computed.Komura.y2_Gill_1981, 'square', 'Color', "#EDB120", 'DisplayName', 'Komura (1966)');
plot(live_bed_measured_y2.Gill, live_bed_computed.Gill.y2_Gill_1981, '^', 'Color', "#77AC30", 'DisplayName', 'Gill (1981)');
plot(live_bed_measured_y2.Rana, live_bed_computed.Rana.y2_Gill_1981, 'x', 'Color', "#7E2F8E", 'DisplayName', 'Rana (1986)');
plot(live_bed_measured_y2.Nowroozpour_and_Ettema, live_bed_computed.Nowroozpour_and_Ettema.y2_Gill_1981, 'diamond', 'Color', "#A2142F", 'DisplayName', 'Nowroozpour and Ettema (2021)');

% Title
title("Equation (13) Gill (1981)")

% Axis
xlabel('Measured $y_{2}$ [m]')
ylabel('Computed $y_{2}$ [m]')
xlim([0 0.5])
ylim([0 0.5])
axis square

% Grid
grid on

% Lim and Cheng (1998)
nexttile
line0 = plot(x_line,y_line, '-k', 'DisplayName', '$x=y$');
hold on
line1 = plot(live_bed_measured_y2.Straub, live_bed_computed.Straub.y2_Lim_Cheng_1998, 'o', 'Color', "#0072BD", 'DisplayName', 'Straub (1934)');
line2 = plot(live_bed_measured_y2.Ashida, live_bed_computed.Ashida.y2_Lim_Cheng_1998, '+', 'Color', "#D95319", 'DisplayName', 'Ashida (1963)');
line3 = plot(live_bed_measured_y2.Komura, live_bed_computed.Komura.y2_Lim_Cheng_1998, 'square', 'Color', "#EDB120", 'DisplayName', 'Komura (1966)');
line4 = plot(live_bed_measured_y2.Gill, live_bed_computed.Gill.y2_Lim_Cheng_1998, '^', 'Color', "#77AC30", 'DisplayName', 'Gill (1981)');
line5 = plot(live_bed_measured_y2.Rana, live_bed_computed.Rana.y2_Lim_Cheng_1998, 'x', 'Color', "#7E2F8E", 'DisplayName', 'Rana (1986)');
line6 = plot(live_bed_measured_y2.Nowroozpour_and_Ettema, live_bed_computed.Nowroozpour_and_Ettema.y2_Lim_Cheng_1998, 'diamond', 'Color', "#A2142F", 'DisplayName', 'Nowroozpour and Ettema (2021)');
% Title
title("Equation (15) Lim and Cheng (1998)")

% Axis
xlabel('Measured $y_{2}$ [m]')
ylabel('Computed $y_{2}$ [m]')
xlim([0 0.5])
ylim([0 0.5])
axis square

% Grid
grid on

% Construct a Legend with the data from the sub-plots
hL = legend([line0,line1,line2,line3,line4,line5,line6],'Orientation','Vertical'); 
hL.Layout.Tile = 6; % THIS IS THE COMMAND THAT WILL SET THE TILE WHERE YOU WANT TO PLOT YOUR LEGEND

% Print
fig = gcf;
fig.PaperUnits = 'inch';
fig.PaperSize=[8.5 11];
fig.PaperPosition = [0 0 8.5 11];
fig.PaperType = 'usletter' ;
fig.PaperOrientation = 'portrait' ;
% print(fig,'..\Figures\live_bed_y2','-depsc')